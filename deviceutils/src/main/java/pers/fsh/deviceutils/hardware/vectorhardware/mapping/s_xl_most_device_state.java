package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_most_device_state extends Structure {
    public int selectionMask;
    /**
     * XL_MOST_STATESEL_LIGHTLOCK<br>
     * see XL_MOST_LOCK_STATUS_EV
     */
    public int lockState;
    /**
     * see XL_MOST_RX_LIGHT_EV
     */
    public int rxLight;
    /**
     * see XL_MOST_TX_LIGHT_EV
     */
    public int txLight;
    /**
     * see XL_MOST_LIGHT_POWER_EV
     */
    public int txLightPower;
    /**
     * XL_MOST_STATESEL_REGISTERBUNCH1<br>
     * 16 OS8104 registers (0x87...0x96 -> NPR...SBC)<br>
     * C type : unsigned char[16]
     */
    public byte[] registerBunch1 = new byte[16];
    /**
     * XL_MOST_STATESEL_BYPASSTIMING<br>
     * see XL_MOST_ALL_BYPASS_EV
     */
    public int bypassState;
    /**
     * see XL_MOST_TIMING_MODE_EV
     */
    public int timingMode;
    /**
     * frame rate (if master); see XL_MOST_FREQUENCY_EV
     */
    public int frequency;
    /**
     * XL_MOST_STATESEL_REGISTERBUNCH2<br>
     * 2 OS8104 registers (0xBE, 0xBF -> XTIM, XRTY)<br>
     * C type : unsigned char[2]
     */
    public byte[] registerBunch2 = new byte[2];
    /**
     * XL_MOST_STATESEL_REGISTERBUNCH3<br>
     * 2 OS8104 registers (0xE8, 0xE9 -> APAH, APAL)<br>
     * C type : unsigned char[2]
     */
    public byte[] registerBunch3 = new byte[2];
    /**
     * XL_MOST_STATESEL_VOLUMEMUTE<br>
     * volume state for DEVICE_CASE_LINE_IN, DEVICE_CASE_LINE_OUT<br>
     * C type : unsigned int[2]
     */
    public int[] volume = new int[2];
    /**
     * mute state for DEVICE_CASE_LINE_IN, DEVICE_CASE_LINE_OUT<br>
     * C type : unsigned int[2]
     */
    public int[] mute = new int[2];
    /**
     * XL_MOST_STATESEL_EVENTSOURCE<br>
     * see XL_MOST_EVENT_SOURCE_EV
     */
    public int eventSource;
    /**
     * XL_MOST_STATESEL_RXBUFFERMODE<br>
     * see XL_MOST_RX_BUFFER_EV
     */
    public int rxBufferMode;
    /**
     * XL_MOST_STATESEL_ALLOCTABLE<br>
     * see XL_MOST_SYNC_ALLOC_EV<br>
     * C type : unsigned char[64]
     */
    public byte[] allocTable = new byte[64];
    /**
     * XL_MOST_STATESEL_SUPERVISOR_LOCKSTATUS
     */
    public int supervisorLockStatus;
    /**
     * XL_MOST_STATESEL_SUPERVISOR_MESSAGE
     */
    public int broadcastedConfigStatus;
    public int adrNetworkMaster;
    public int abilityToWake;

    public s_xl_most_device_state() {
        super(8);
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("selectionMask", "lockState", "rxLight", "txLight", "txLightPower", "registerBunch1", "bypassState", "timingMode", "frequency", "registerBunch2", "registerBunch3", "volume", "mute", "eventSource", "rxBufferMode", "allocTable", "supervisorLockStatus", "broadcastedConfigStatus", "adrNetworkMaster", "abilityToWake");
    }

    public static class ByReference extends s_xl_most_device_state implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_most_device_state implements Structure.ByValue {

    }

    ;
}
