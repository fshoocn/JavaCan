package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;
import com.sun.jna.Union;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_net_eth_event extends Structure {
    /**
     * 4 - overall size of the complete event
     */
    public int size;
    /**
     * 2 - type of the event<br>
     * C type : XLethEventTag
     */
    public short tag;
    /**
     * 2 - channel index
     */
    public short channelIndex;
    /**
     * 4 - application specific user handle
     */
    public int userHandle;
    /**
     * 2 - flags
     */
    public short flagsChip;
    /**
     * 2 - currently reserved field - not used
     */
    public short reserved;
    /**
     * 8 - currently reserved field - not used<br>
     * C type : XLuint64
     */
    public long reserved1;
    /**
     * 8 - synchronized TS by the driver<br>
     * C type : XLuint64
     */
    public long timeStampSync;
    /**
     * C type : s_xl_eth_net_tag_data
     */
    public s_xl_eth_net_tag_data tagData;

    public s_xl_net_eth_event() {
        super(4);
    }

    ;

    /**
     * @param size          4 - overall size of the complete event<br>
     * @param tag           2 - type of the event<br>
     *                      C type : XLethEventTag<br>
     * @param channelIndex  2 - channel index<br>
     * @param userHandle    4 - application specific user handle<br>
     * @param flagsChip     2 - flags<br>
     * @param reserved      2 - currently reserved field - not used<br>
     * @param reserved1     8 - currently reserved field - not used<br>
     *                      C type : XLuint64<br>
     * @param timeStampSync 8 - synchronized TS by the driver<br>
     *                      C type : XLuint64<br>
     * @param tagData       C type : s_xl_eth_net_tag_data
     */
    public s_xl_net_eth_event(int size, short tag, short channelIndex, int userHandle, short flagsChip, short reserved, long reserved1, long timeStampSync, s_xl_eth_net_tag_data tagData) {
        super(4);
        this.size = size;
        this.tag = tag;
        this.channelIndex = channelIndex;
        this.userHandle = userHandle;
        this.flagsChip = flagsChip;
        this.reserved = reserved;
        this.reserved1 = reserved1;
        this.timeStampSync = timeStampSync;
        this.tagData = tagData;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("size", "tag", "channelIndex", "userHandle", "flagsChip", "reserved", "reserved1", "timeStampSync", "tagData");
    }

    /**
     * <i>native declaration : vxlapi.h:136</i>
     */
    public static class s_xl_eth_net_tag_data extends Union {
        /**
         * C type : unsigned char[(unsigned int)2048]
         */
        public byte[] rawData = new byte[2048];
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_RX
         */
        public s_xl_net_eth_dataframe_rx frameSimRx;
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_RX_ERROR
         */
        public s_xl_net_eth_dataframe_rx_error frameSimRxError;
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_SIMULATION_TX_ACK
         */
        public s_xl_net_eth_dataframe_rx frameSimTxAck;
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_SIMULATION_TX_ERROR
         */
        public s_xl_net_eth_dataframe_rx_error frameSimTxError;
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_RX
         */
        public s_xl_net_eth_dataframe_rx frameMeasureRx;
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_RX_ERROR
         */
        public s_xl_net_eth_dataframe_rx_error frameMeasureRxError;
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_TX
         */
        public s_xl_net_eth_dataframe_rx frameMeasureTx;
        /**
         * C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_TX_ERROR
         */
        public s_xl_net_eth_dataframe_rx_error frameMeasureTxError;
        /**
         * C type : T_XL_NET_ETH_CHANNEL_STATUS
         */
        public s_xl_eth_channel_status channelStatus;

        public s_xl_eth_net_tag_data() {
            super();
        }

        /**
         * @param rawData C type : unsigned char[(unsigned int)2048]
         */
        public s_xl_eth_net_tag_data(byte rawData[]) {
            super();
            if ((rawData.length != this.rawData.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.rawData = rawData;
            setType(byte[].class);
        }

        /**
         * @param frameSimRxError_or_frameSimTxError_or_frameMeasureRxError_or_frameMeasureTxError C type : T_XL_NET_ETH_DATAFRAME_RX_ERROR, or C type : T_XL_NET_ETH_DATAFRAME_SIMULATION_TX_ERROR, or C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_RX_ERROR, or C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_TX_ERROR
         */
        public s_xl_eth_net_tag_data(s_xl_net_eth_dataframe_rx_error frameSimRxError_or_frameSimTxError_or_frameMeasureRxError_or_frameMeasureTxError) {
            super();
            this.frameMeasureTxError = this.frameMeasureRxError = this.frameSimTxError = this.frameSimRxError = frameSimRxError_or_frameSimTxError_or_frameMeasureRxError_or_frameMeasureTxError;
            setType(s_xl_net_eth_dataframe_rx_error.class);
        }

        /**
         * @param frameSimRx_or_frameSimTxAck_or_frameMeasureRx_or_frameMeasureTx C type : T_XL_NET_ETH_DATAFRAME_RX, or C type : T_XL_NET_ETH_DATAFRAME_SIMULATION_TX_ACK, or C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_RX, or C type : T_XL_NET_ETH_DATAFRAME_MEASUREMENT_TX
         */
        public s_xl_eth_net_tag_data(s_xl_net_eth_dataframe_rx frameSimRx_or_frameSimTxAck_or_frameMeasureRx_or_frameMeasureTx) {
            super();
            this.frameMeasureTx = this.frameMeasureRx = this.frameSimTxAck = this.frameSimRx = frameSimRx_or_frameSimTxAck_or_frameMeasureRx_or_frameMeasureTx;
            setType(s_xl_net_eth_dataframe_rx.class);
        }

        /**
         * @param channelStatus C type : T_XL_NET_ETH_CHANNEL_STATUS
         */
        public s_xl_eth_net_tag_data(s_xl_eth_channel_status channelStatus) {
            super();
            this.channelStatus = channelStatus;
            setType(s_xl_eth_channel_status.class);
        }

        public static class ByReference extends s_xl_eth_net_tag_data implements Structure.ByReference {

        }

        ;

        public static class ByValue extends s_xl_eth_net_tag_data implements Structure.ByValue {

        }

        ;
    }

    public static class ByReference extends s_xl_net_eth_event implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_net_eth_event implements Structure.ByValue {

    }

    ;
}
