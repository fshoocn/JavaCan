package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class xl_daio_analog_params extends Structure {
    /**
     * !< Use defines XL_DAIO_PORT_MASK_ANALOG_*
     */
    public int portMask;
    /**
     * !< 12-bit values<br>
     * C type : unsigned int[8]
     */
    public int[] value = new int[8];

    public xl_daio_analog_params() {
        super(8);
    }

    /**
     * @param portMask !< Use defines XL_DAIO_PORT_MASK_ANALOG_*<br>
     * @param value    !< 12-bit values<br>
     *                 C type : unsigned int[8]
     */
    public xl_daio_analog_params(int portMask, int value[]) {
        super(8);
        this.portMask = portMask;
        if ((value.length != this.value.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.value = value;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("portMask", "value");
    }

    public static class ByReference extends xl_daio_analog_params implements Structure.ByReference {

    }

    ;

    public static class ByValue extends xl_daio_analog_params implements Structure.ByValue {

    }

    ;
}
