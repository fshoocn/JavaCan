package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * 32 Bytes<br>
 * <i>native declaration : vxlapi.h:111</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_can_msg extends Structure {
    public int id;
    public short flags;
    public short dlc;
    /**
     * C type : XLuint64
     */
    public long res1;
    /**
     * C type : unsigned char[8]
     */
    public byte[] data = new byte[8];
    /**
     * C type : XLuint64
     */
    public long res2;

    public s_xl_can_msg() {
        super(1);
    }

    /**
     * @param res1 C type : XLuint64<br>
     * @param data C type : unsigned char[8]<br>
     * @param res2 C type : XLuint64
     */
    public s_xl_can_msg(int id, short flags, short dlc, long res1, byte data[], long res2) {
        super(1);
        this.id = id;
        this.flags = flags;
        this.dlc = dlc;
        this.res1 = res1;
        if ((data.length != this.data.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.data = data;
        this.res2 = res2;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("id", "flags", "dlc", "res1", "data", "res2");
    }

    public static class ByReference extends s_xl_can_msg implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_can_msg implements Structure.ByValue {

    }

    ;
}
