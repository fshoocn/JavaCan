package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_eth_dataframe_tx extends Structure {
    /**
     * FPGA internal identifier unique to every frame sent
     */
    public int frameIdentifier;
    /**
     * Flags to specify (see XL_ETH_DATAFRAME_FLAGS_)
     */
    public int flags;
    /**
     * Overall data length of <frameData>
     */
    public short dataLen;
    /**
     * currently reserved field - must be set to "0"
     */
    public short reserved;
    /**
     * reserved field - must be set to "0"<br>
     * C type : unsigned int[4]
     */
    public int[] reserved2 = new int[4];
    /**
     * Destination MAC address<br>
     * C type : unsigned char[6]
     */
    public byte[] destMAC = new byte[6];
    /**
     * Source MAC address<br>
     * C type : unsigned char[6]
     */
    public byte[] sourceMAC = new byte[6];
    /**
     * C type : T_XL_ETH_FRAMEDATA
     */
    public s_xl_eth_framedata frameData;

    public s_xl_eth_dataframe_tx() {
        super(1);
    }

    /**
     * @param frameIdentifier FPGA internal identifier unique to every frame sent<br>
     * @param flags           Flags to specify (see XL_ETH_DATAFRAME_FLAGS_)<br>
     * @param dataLen         Overall data length of <frameData><br>
     * @param reserved        currently reserved field - must be set to "0"<br>
     * @param reserved2       reserved field - must be set to "0"<br>
     *                        C type : unsigned int[4]<br>
     * @param destMAC         Destination MAC address<br>
     *                        C type : unsigned char[6]<br>
     * @param sourceMAC       Source MAC address<br>
     *                        C type : unsigned char[6]<br>
     * @param frameData       C type : T_XL_ETH_FRAMEDATA
     */
    public s_xl_eth_dataframe_tx(int frameIdentifier, int flags, short dataLen, short reserved, int reserved2[], byte destMAC[], byte sourceMAC[], s_xl_eth_framedata frameData) {
        super(1);
        this.frameIdentifier = frameIdentifier;
        this.flags = flags;
        this.dataLen = dataLen;
        this.reserved = reserved;
        if ((reserved2.length != this.reserved2.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.reserved2 = reserved2;
        if ((destMAC.length != this.destMAC.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.destMAC = destMAC;
        if ((sourceMAC.length != this.sourceMAC.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.sourceMAC = sourceMAC;
        this.frameData = frameData;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("frameIdentifier", "flags", "dataLen", "reserved", "reserved2", "destMAC", "sourceMAC", "frameData");
    }

    public static class ByReference extends s_xl_eth_dataframe_tx implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_eth_dataframe_tx implements Structure.ByValue {

    }

    ;
}
