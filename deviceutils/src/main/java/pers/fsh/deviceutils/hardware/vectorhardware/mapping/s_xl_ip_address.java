package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;
import com.sun.jna.Union;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_ip_address extends Structure {
    /**
     * C type : ip_union
     */
    public ip_union ip;
    public int prefixLength;
    public int ipVersion;
    public int configPort;
    public int eventPort;

    public s_xl_ip_address() {
        super(8);
    }

    ;

    /**
     * @param ip C type : ip_union
     */
    public s_xl_ip_address(ip_union ip, int prefixLength, int ipVersion, int configPort, int eventPort) {
        super(8);
        this.ip = ip;
        this.prefixLength = prefixLength;
        this.ipVersion = ipVersion;
        this.configPort = configPort;
        this.eventPort = eventPort;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("ip", "prefixLength", "ipVersion", "configPort", "eventPort");
    }

    /**
     * <i>native declaration : vxlapi.h:6</i>
     */
    public static class ip_union extends Union {
        public int v4;
        /**
         * C type : unsigned int[4]
         */
        public int[] v6 = new int[4];

        public ip_union() {
            super();
        }

        /**
         * @param v6 C type : unsigned int[4]
         */
        public ip_union(int v6[]) {
            super();
            if ((v6.length != this.v6.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.v6 = v6;
            setType(int[].class);
        }

        public ip_union(int v4) {
            super();
            this.v4 = v4;
            setType(Integer.TYPE);
        }

        public static class ByReference extends ip_union implements Structure.ByReference {

        }

        ;

        public static class ByValue extends ip_union implements Structure.ByValue {

        }

        ;
    }

    public static class ByReference extends s_xl_ip_address implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_ip_address implements Structure.ByValue {

    }

    ;
}
