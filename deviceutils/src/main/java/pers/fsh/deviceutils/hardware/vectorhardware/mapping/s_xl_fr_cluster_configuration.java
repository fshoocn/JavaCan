package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_fr_cluster_configuration extends Structure {
    public int busGuardianEnable;
    public int baudrate;
    public int busGuardianTick;
    public int externalClockCorrectionMode;
    public int gColdStartAttempts;
    public int gListenNoise;
    public int gMacroPerCycle;
    public int gMaxWithoutClockCorrectionFatal;
    public int gMaxWithoutClockCorrectionPassive;
    public int gNetworkManagementVectorLength;
    public int gNumberOfMinislots;
    public int gNumberOfStaticSlots;
    public int gOffsetCorrectionStart;
    public int gPayloadLengthStatic;
    public int gSyncNodeMax;
    public int gdActionPointOffset;
    public int gdDynamicSlotIdlePhase;
    public int gdMacrotick;
    public int gdMinislot;
    public int gdMiniSlotActionPointOffset;
    public int gdNIT;
    public int gdStaticSlot;
    public int gdSymbolWindow;
    public int gdTSSTransmitter;
    public int gdWakeupSymbolRxIdle;
    public int gdWakeupSymbolRxLow;
    public int gdWakeupSymbolRxWindow;
    public int gdWakeupSymbolTxIdle;
    public int gdWakeupSymbolTxLow;
    public int pAllowHaltDueToClock;
    public int pAllowPassiveToActive;
    public int pChannels;
    public int pClusterDriftDamping;
    public int pDecodingCorrection;
    public int pDelayCompensationA;
    public int pDelayCompensationB;
    public int pExternOffsetCorrection;
    public int pExternRateCorrection;
    public int pKeySlotUsedForStartup;
    public int pKeySlotUsedForSync;
    public int pLatestTx;
    public int pMacroInitialOffsetA;
    public int pMacroInitialOffsetB;
    public int pMaxPayloadLengthDynamic;
    public int pMicroInitialOffsetA;
    public int pMicroInitialOffsetB;
    public int pMicroPerCycle;
    public int pMicroPerMacroNom;
    public int pOffsetCorrectionOut;
    public int pRateCorrectionOut;
    public int pSamplesPerMicrotick;
    public int pSingleSlotEnabled;
    public int pWakeupChannel;
    public int pWakeupPattern;
    public int pdAcceptedStartupRange;
    public int pdListenTimeout;
    public int pdMaxDrift;
    public int pdMicrotick;
    public int gdCASRxLowMax;
    public int gChannels;
    public int vExternOffsetControl;
    public int vExternRateControl;
    public int pChannelsMTS;
    /**
     * !< 16-bit value with data for pre-initializing the Flexray payload data words
     */
    public int framePresetData;
    /**
     * C type : unsigned int[15]
     */
    public int[] reserved = new int[15];

    public s_xl_fr_cluster_configuration() {
        super(4);
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("busGuardianEnable", "baudrate", "busGuardianTick", "externalClockCorrectionMode", "gColdStartAttempts", "gListenNoise", "gMacroPerCycle", "gMaxWithoutClockCorrectionFatal", "gMaxWithoutClockCorrectionPassive", "gNetworkManagementVectorLength", "gNumberOfMinislots", "gNumberOfStaticSlots", "gOffsetCorrectionStart", "gPayloadLengthStatic", "gSyncNodeMax", "gdActionPointOffset", "gdDynamicSlotIdlePhase", "gdMacrotick", "gdMinislot", "gdMiniSlotActionPointOffset", "gdNIT", "gdStaticSlot", "gdSymbolWindow", "gdTSSTransmitter", "gdWakeupSymbolRxIdle", "gdWakeupSymbolRxLow", "gdWakeupSymbolRxWindow", "gdWakeupSymbolTxIdle", "gdWakeupSymbolTxLow", "pAllowHaltDueToClock", "pAllowPassiveToActive", "pChannels", "pClusterDriftDamping", "pDecodingCorrection", "pDelayCompensationA", "pDelayCompensationB", "pExternOffsetCorrection", "pExternRateCorrection", "pKeySlotUsedForStartup", "pKeySlotUsedForSync", "pLatestTx", "pMacroInitialOffsetA", "pMacroInitialOffsetB", "pMaxPayloadLengthDynamic", "pMicroInitialOffsetA", "pMicroInitialOffsetB", "pMicroPerCycle", "pMicroPerMacroNom", "pOffsetCorrectionOut", "pRateCorrectionOut", "pSamplesPerMicrotick", "pSingleSlotEnabled", "pWakeupChannel", "pWakeupPattern", "pdAcceptedStartupRange", "pdListenTimeout", "pdMaxDrift", "pdMicrotick", "gdCASRxLowMax", "gChannels", "vExternOffsetControl", "vExternRateControl", "pChannelsMTS", "framePresetData", "reserved");
    }

    public static class ByReference extends s_xl_fr_cluster_configuration implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_fr_cluster_configuration implements Structure.ByValue {

    }

    ;
}
