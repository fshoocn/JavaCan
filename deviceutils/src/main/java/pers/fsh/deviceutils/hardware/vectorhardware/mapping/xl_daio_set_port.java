package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class xl_daio_set_port extends Structure {
    /**
     * !< Only one signal group is allowed. One of the defines XL_DAIO_PORT_TYPE_MASK_*
     */
    public int portType;
    /**
     * !< Mask of affected ports.
     */
    public int portMask;
    /**
     * !< Special function of port. One of the defines XL_DAIO_PORT_DIGITAL_* or XL_DAIO_PORT_ANALOG_*<br>
     * C type : unsigned int[8]
     */
    public int[] portFunction = new int[8];
    /**
     * !< Set this parameters to zero!<br>
     * C type : unsigned int[8]
     */
    public int[] reserved = new int[8];

    public xl_daio_set_port() {
        super(8);
    }

    /**
     * @param portType     !< Only one signal group is allowed. One of the defines XL_DAIO_PORT_TYPE_MASK_*<br>
     * @param portMask     !< Mask of affected ports.<br>
     * @param portFunction !< Special function of port. One of the defines XL_DAIO_PORT_DIGITAL_* or XL_DAIO_PORT_ANALOG_*<br>
     *                     C type : unsigned int[8]<br>
     * @param reserved     !< Set this parameters to zero!<br>
     *                     C type : unsigned int[8]
     */
    public xl_daio_set_port(int portType, int portMask, int portFunction[], int reserved[]) {
        super(8);
        this.portType = portType;
        this.portMask = portMask;
        if ((portFunction.length != this.portFunction.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.portFunction = portFunction;
        if ((reserved.length != this.reserved.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.reserved = reserved;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("portType", "portMask", "portFunction", "reserved");
    }

    public static class ByReference extends xl_daio_set_port implements Structure.ByReference {

    }

    ;

    public static class ByValue extends xl_daio_set_port implements Structure.ByValue {

    }

    ;
}
