package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;
import com.sun.jna.Union;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class XLbusParams extends Structure {
    public int busType;
    /**
     * C type : data_union
     */
    public data_union data;

    public XLbusParams() {
        super(1);
    }

    ;

    /**
     * @param data C type : data_union
     */
    public XLbusParams(int busType, data_union data) {
        super(1);
        this.busType = busType;
        this.data = data;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("busType", "data");
    }

    @Override
    public void write() {
        super.write();
        switch (busType) {
            case 1:
                data.setType(data_union.can_struct.class);
                break;
            case 0x00000004:
                data.setType(data_union.flexray_struct.class);
                break;
            case 0x00000010:
                data.setType(data_union.most_struct.class);
                break;
            case 0x00002000:
                data.setType(data_union.a429_struct.class);
                break;
            case 0x00001000:
                data.setType(data_union.ethernet_struct.class);
                break;
            default:
                data.setType(data_union.canFD_struct.class);
        }

    }

    @Override
    public void read() {
        super.read();
        switch (busType) {
            case 1: // CAN
                data.setType(data_union.canFD_struct.class);
                break;
            case 0x00000004:
                data.setType(data_union.flexray_struct.class);
                break;
            case 0x00000010:
                data.setType(data_union.most_struct.class);
                break;
            case 0x00002000:
                data.setType(data_union.a429_struct.class);
                break;
            case 0x00001000:
                data.setType(data_union.ethernet_struct.class);
                break;
            default:
                data.setType(data_union.canFD_struct.class);
        }
    }

    /**
     * 根据busType获取总线类型的字符串表示
     */
    private String getBusTypeString() {
        return switch (busType) {
            case 0 -> "XL_BUS_TYPE_NONE";
            case 1 -> "XL_BUS_TYPE_CAN";
            case 2 -> "XL_BUS_TYPE_LIN";
            case 3 -> "XL_BUS_TYPE_FLEXRAY";
            case 4 -> "XL_BUS_TYPE_AFDX";
            case 5 -> "XL_BUS_TYPE_MOST";
            case 6 -> "XL_BUS_TYPE_DAIO";
            case 7 -> "XL_BUS_TYPE_J1708";
            case 8 -> "XL_BUS_TYPE_ETHERNET";
            case 9 -> "XL_BUS_TYPE_A429";
            default -> "UNKNOWN_BUS_TYPE_" + busType;
        };
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("XLbusParams {\n");
        sb.append("  busType: ").append(busType).append(" (").append(getBusTypeString()).append(")\n");

        // 根据busType确定使用的union成员并打印
        sb.append("  data: ");
        if (data != null) {
            switch (busType) {
                case 1: // XL_BUS_TYPE_CAN
                    data.setType(data_union.canFD_struct.class);
                    sb.append("\n").append(data.canFD.toString().replaceAll("(?m)^", "    "));
                    break;
                case 0x00000004: // XL_BUS_TYPE_FLEXRAY
                    data.setType(data_union.flexray_struct.class);
                    sb.append("\n").append(data.flexray.toString().replaceAll("(?m)^", "    "));
                    break;
                case 0x00000010: // XL_BUS_TYPE_MOST
                    data.setType(data_union.most_struct.class);
                    sb.append("\n").append(data.most.toString().replaceAll("(?m)^", "    "));
                    break;
                case 0x00002000: // XL_BUS_TYPE_A429
                    data.setType(data_union.a429_struct.class);
                    sb.append("\n").append(data.a429.toString().replaceAll("(?m)^", "    "));
                    break;
                case 0x00001000: // XL_BUS_TYPE_ETHERNET
                    data.setType(data_union.ethernet_struct.class);
                    sb.append("\n").append(data.ethernet.toString().replaceAll("(?m)^", "    "));
                    break;
                default:
                    // 默认使用CAN FD
                    data.setType(data_union.can_struct.class);
                    sb.append("\n").append(Arrays.toString(data.raw).replaceAll("(?m)^", "    "));
                    break;
            }
        } else {
            sb.append("null");
        }

        sb.append("\n}");
        return sb.toString();
    }

    ;

    /**
     * <i>native declaration : vxlapi.h:494</i>
     */
    public static class data_union extends Union {
        /**
         * C type : can_struct
         */
        public can_struct can;
        /**
         * C type : canFD_struct
         */
        public canFD_struct canFD;
        /**
         * C type : most_struct
         */
        public most_struct most;
        /**
         * C type : flexray_struct
         */
        public flexray_struct flexray;
        /**
         * C type : ethernet_struct
         */
        public ethernet_struct ethernet;
        /**
         * C type : a429_struct
         */
        public a429_struct a429;
        /**
         * C type : unsigned char[28]
         */
        public byte[] raw = new byte[28];

        public data_union() {
            super();
        }

        ;

        /**
         * @param raw C type : unsigned char[28]
         */
        public data_union(byte[] raw) {
            super();
            if ((raw.length != this.raw.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.raw = raw;
            setType(byte[].class);
        }

        ;

        /**
         * @param most C type : most_struct
         */
        public data_union(most_struct most) {
            super();
            this.most = most;
            setType(most_struct.class);
        }

        ;

        /**
         * @param a429 C type : a429_struct
         */
        public data_union(a429_struct a429) {
            super();
            this.a429 = a429;
            setType(a429_struct.class);
        }

        ;

        /**
         * @param canFD C type : canFD_struct
         */
        public data_union(canFD_struct canFD) {
            super();
            this.canFD = canFD;
            setType(canFD_struct.class);
        }

        ;

        /**
         * @param flexray C type : flexray_struct
         */
        public data_union(flexray_struct flexray) {
            super();
            this.flexray = flexray;
            setType(flexray_struct.class);
        }

        ;

        /**
         * @param ethernet C type : ethernet_struct
         */
        public data_union(ethernet_struct ethernet) {
            super();
            this.ethernet = ethernet;
            setType(ethernet_struct.class);
        }

        /**
         * @param can C type : can_struct
         */
        public data_union(can_struct can) {
            super();
            this.can = can;
            setType(can_struct.class);
        }

        /**
         * <i>native declaration : vxlapi.h:495</i>
         */
        public static class can_struct extends Structure {
            public int bitRate;
            public byte sjw;
            public byte tseg1;
            public byte tseg2;
            /**
             * 1 or 3
             */
            public byte sam;
            public byte outputMode;
            /**
             * C type : unsigned char[7]
             */
            public byte[] reserved1 = new byte[7];
            public byte canOpMode;

            public can_struct() {
                super(1);
            }

            /**
             * @param sam       1 or 3<br>
             * @param reserved1 C type : unsigned char[7]
             */
            public can_struct(int bitRate, byte sjw, byte tseg1, byte tseg2, byte sam, byte outputMode, byte reserved1[], byte canOpMode) {
                super(1);
                this.bitRate = bitRate;
                this.sjw = sjw;
                this.tseg1 = tseg1;
                this.tseg2 = tseg2;
                this.sam = sam;
                this.outputMode = outputMode;
                if ((reserved1.length != this.reserved1.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.reserved1 = reserved1;
                this.canOpMode = canOpMode;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("bitRate", "sjw", "tseg1", "tseg2", "sam", "outputMode", "reserved1", "canOpMode");
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append("can_struct {\n");
                sb.append("  bitRate: ").append(bitRate).append(" bits/s\n");
                sb.append("  sjw: ").append(sjw & 0xFF).append("\n");
                sb.append("  tseg1: ").append(tseg1 & 0xFF).append("\n");
                sb.append("  tseg2: ").append(tseg2 & 0xFF).append("\n");
                sb.append("  sam: ").append(sam & 0xFF).append("\n");
                sb.append("  outputMode: ").append(outputMode & 0xFF).append("\n");
                sb.append("  reserved1: ").append(Arrays.toString(reserved1)).append("\n");
                sb.append("  canOpMode: ").append(canOpMode & 0xFF).append("\n");
                sb.append("}");
                return sb.toString();
            }

            ;

            public static class ByReference extends can_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends can_struct implements Structure.ByValue {

            }
        }

        /**
         * <i>native declaration : vxlapi.h:506</i>
         */
        public static class canFD_struct extends Structure {
            /**
             * CAN bus timing for nominal / arbitration bit rate
             */
            public int arbitrationBitRate;
            public byte sjwAbr;
            public byte tseg1Abr;
            public byte tseg2Abr;
            /**
             * 1 or 3
             */
            public byte samAbr;
            public byte outputMode;
            /**
             * CAN bus timing for data bit rate
             */
            public byte sjwDbr;
            public byte tseg1Dbr;
            public byte tseg2Dbr;
            public int dataBitRate;
            public byte canOpMode;

            public canFD_struct() {
                super(1);
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("arbitrationBitRate", "sjwAbr", "tseg1Abr", "tseg2Abr", "samAbr", "outputMode", "sjwDbr", "tseg1Dbr", "tseg2Dbr", "dataBitRate", "canOpMode");
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append("canFD_struct {\n");
                sb.append("  arbitrationBitRate: ").append(arbitrationBitRate).append(" bits/s\n");
                sb.append("  sjwAbr: ").append(sjwAbr & 0xFF).append("\n");
                sb.append("  tseg1Abr: ").append(tseg1Abr & 0xFF).append("\n");
                sb.append("  tseg2Abr: ").append(tseg2Abr & 0xFF).append("\n");
                sb.append("  samAbr: ").append(samAbr & 0xFF).append("\n");
                sb.append("  outputMode: ").append(outputMode & 0xFF).append("\n");
                sb.append("  sjwDbr: ").append(sjwDbr & 0xFF).append("\n");
                sb.append("  tseg1Dbr: ").append(tseg1Dbr & 0xFF).append("\n");
                sb.append("  tseg2Dbr: ").append(tseg2Dbr & 0xFF).append("\n");
                sb.append("  dataBitRate: ").append(dataBitRate).append(" bits/s\n");
                sb.append("  canOpMode: ").append(canOpMode & 0xFF).append("\n");
                sb.append("}");
                return sb.toString();
            }

            ;

            public static class ByReference extends canFD_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends canFD_struct implements Structure.ByValue {

            }
        }

        /**
         * <i>native declaration : vxlapi.h:521</i>
         */
        public static class most_struct extends Structure {
            public int activeSpeedGrade;
            public int compatibleSpeedGrade;
            public int inicFwVersion;

            public most_struct() {
                super(1);
            }

            public most_struct(int activeSpeedGrade, int compatibleSpeedGrade, int inicFwVersion) {
                super(1);
                this.activeSpeedGrade = activeSpeedGrade;
                this.compatibleSpeedGrade = compatibleSpeedGrade;
                this.inicFwVersion = inicFwVersion;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("activeSpeedGrade", "compatibleSpeedGrade", "inicFwVersion");
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append("most_struct {\n");
                sb.append("  activeSpeedGrade: ").append(activeSpeedGrade).append("\n");
                sb.append("  compatibleSpeedGrade: ").append(compatibleSpeedGrade).append("\n");
                sb.append("  inicFwVersion: 0x").append(Integer.toHexString(inicFwVersion)).append("\n");
                sb.append("}");
                return sb.toString();
            }

            ;

            public static class ByReference extends most_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends most_struct implements Structure.ByValue {

            }
        }

        /**
         * <i>native declaration : vxlapi.h:527</i>
         */
        public static class flexray_struct extends Structure {
            /**
             * status and cfg mode are part of xlFrGetChannelConfiguration, too<br>
             * XL_FR_CHANNEL_CFG_STATUS_xxx
             */
            public int status;
            /**
             * XL_FR_CHANNEL_CFG_MODE_xxx
             */
            public int cfgMode;
            /**
             * FlexRay baudrate in kBaud
             */
            public int baudrate;

            public flexray_struct() {
                super(1);
            }

            /**
             * @param status   status and cfg mode are part of xlFrGetChannelConfiguration, too<br>
             *                 XL_FR_CHANNEL_CFG_STATUS_xxx<br>
             * @param cfgMode  XL_FR_CHANNEL_CFG_MODE_xxx<br>
             * @param baudrate FlexRay baudrate in kBaud
             */
            public flexray_struct(int status, int cfgMode, int baudrate) {
                super(1);
                this.status = status;
                this.cfgMode = cfgMode;
                this.baudrate = baudrate;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("status", "cfgMode", "baudrate");
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append("flexray_struct {\n");
                sb.append("  status: 0x").append(Integer.toHexString(status)).append("\n");
                sb.append("  cfgMode: 0x").append(Integer.toHexString(cfgMode)).append("\n");
                sb.append("  baudrate: ").append(baudrate).append(" kBaud\n");
                sb.append("}");
                return sb.toString();
            }

            ;

            public static class ByReference extends flexray_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends flexray_struct implements Structure.ByValue {

            }
        }

        /**
         * <i>native declaration : vxlapi.h:534</i>
         */
        public static class ethernet_struct extends Structure {
            /**
             * MAC address (starting with MSB!)<br>
             * C type : unsigned char[6]
             */
            public byte[] macAddr = new byte[6];
            /**
             * XL_ETH_STATUS_CONNECTOR_xxx
             */
            public byte connector;
            /**
             * XL_ETH_STATUS_PHY_xxx
             */
            public byte phy;
            /**
             * XL_ETH_STATUS_LINK_xxx
             */
            public byte link;
            /**
             * XL_ETH_STATUS_SPEED_xxx
             */
            public byte speed;
            /**
             * XL_ETH_STATUS_CLOCK_xxx
             */
            public byte clockMode;
            /**
             * XL_ETH_BYPASS_xxx
             */
            public byte bypass;

            public ethernet_struct() {
                super(1);
            }

            /**
             * @param macAddr   MAC address (starting with MSB!)<br>
             *                  C type : unsigned char[6]<br>
             * @param connector XL_ETH_STATUS_CONNECTOR_xxx<br>
             * @param phy       XL_ETH_STATUS_PHY_xxx<br>
             * @param link      XL_ETH_STATUS_LINK_xxx<br>
             * @param speed     XL_ETH_STATUS_SPEED_xxx<br>
             * @param clockMode XL_ETH_STATUS_CLOCK_xxx<br>
             * @param bypass    XL_ETH_BYPASS_xxx
             */
            public ethernet_struct(byte macAddr[], byte connector, byte phy, byte link, byte speed, byte clockMode, byte bypass) {
                super(1);
                if ((macAddr.length != this.macAddr.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.macAddr = macAddr;
                this.connector = connector;
                this.phy = phy;
                this.link = link;
                this.speed = speed;
                this.clockMode = clockMode;
                this.bypass = bypass;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("macAddr", "connector", "phy", "link", "speed", "clockMode", "bypass");
            }

            /**
             * 将MAC地址格式化为标准格式
             */
            private String formatMacAddress() {
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < macAddr.length; i++) {
                    sb.append(String.format("%02X", macAddr[i] & 0xFF));
                    if (i < macAddr.length - 1) {
                        sb.append(":");
                    }
                }
                return sb.toString();
            }

            ;

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append("ethernet_struct {\n");
                sb.append("  macAddr: ").append(formatMacAddress()).append("\n");
                sb.append("  connector: ").append(connector & 0xFF).append("\n");
                sb.append("  phy: ").append(phy & 0xFF).append("\n");
                sb.append("  link: ").append(link & 0xFF).append("\n");
                sb.append("  speed: ").append(speed & 0xFF).append("\n");
                sb.append("  clockMode: ").append(clockMode & 0xFF).append("\n");
                sb.append("  bypass: ").append(bypass & 0xFF).append("\n");
                sb.append("}");
                return sb.toString();
            }

            ;

            public static class ByReference extends ethernet_struct implements Structure.ByReference {

            }

            public static class ByValue extends ethernet_struct implements Structure.ByValue {

            }
        }

        /**
         * <i>native declaration : vxlapi.h:544</i>
         */
        public static class a429_struct extends Structure {
            public short channelDirection;
            public short res1;
            /**
             * C type : dir_union
             */
            public dir_union dir;

            public a429_struct() {
                super(1);
            }

            ;

            /**
             * @param dir C type : dir_union
             */
            public a429_struct(short channelDirection, short res1, dir_union dir) {
                super(1);
                this.channelDirection = channelDirection;
                this.res1 = res1;
                this.dir = dir;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("channelDirection", "res1", "dir");
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append("a429_struct {\n");
                sb.append("  channelDirection: ").append(channelDirection & 0xFFFF).append("\n");
                sb.append("  res1: ").append(res1 & 0xFFFF).append("\n");
                sb.append("  dir: \n").append(dir != null ? dir.toString().replaceAll("(?m)^", "    ") : "null").append("\n");
                sb.append("}");
                return sb.toString();
            }

            /**
             * <i>native declaration : vxlapi.h:548</i>
             */
            public static class dir_union extends Union {
                /**
                 * C type : tx_struct
                 */
                public tx_struct tx;
                /**
                 * C type : rx_struct
                 */
                public rx_struct rx;
                /**
                 * C type : unsigned char[24]
                 */
                public byte[] raw = new byte[24];

                public dir_union() {
                    super();
                }

                ;

                /**
                 * @param raw C type : unsigned char[24]
                 */
                public dir_union(byte raw[]) {
                    super();
                    if ((raw.length != this.raw.length))
                        throw new IllegalArgumentException("Wrong array size !");
                    this.raw = raw;
                    setType(byte[].class);
                }

                ;

                /**
                 * @param tx C type : tx_struct
                 */
                public dir_union(tx_struct tx) {
                    super();
                    this.tx = tx;
                    setType(tx_struct.class);
                }

                /**
                 * @param rx C type : rx_struct
                 */
                public dir_union(rx_struct rx) {
                    super();
                    this.rx = rx;
                    setType(rx_struct.class);
                }

                @Override
                public String toString() {
                    // 确定使用的是哪个联合体成员
                    String activeMemberType = getActiveMemberType();
                    StringBuilder sb = new StringBuilder();
                    sb.append("dir_union {\n");
                    if ("tx_struct".equals(activeMemberType)) {
                        sb.append("  tx: \n").append(tx.toString().replaceAll("(?m)^", "    ")).append("\n");
                    } else if ("rx_struct".equals(activeMemberType)) {
                        sb.append("  rx: \n").append(rx.toString().replaceAll("(?m)^", "    ")).append("\n");
                    } else {
                        sb.append("  raw: ").append(Arrays.toString(raw)).append("\n");
                    }
                    sb.append("}");
                    return sb.toString();
                }

                /**
                 * 获取实际使用的联合体成员类型
                 */
                private String getActiveMemberType() {
                    // 内存布局中的活动类型可能由外部设置
                    // 这里简单返回setType设置的类型，或默认为raw
                    if (tx != null && getFields(true).get(0).getName().equals("tx")) {
                        return "tx_struct";
                    } else if (rx != null && getFields(true).get(0).getName().equals("rx")) {
                        return "rx_struct";
                    } else {
                        return "raw";
                    }
                }

                /**
                 * <i>native declaration : vxlapi.h:549</i>
                 */
                public static class tx_struct extends Structure {
                    public int bitrate;
                    public int parity;
                    public int minGap;

                    public tx_struct() {
                        super(1);
                    }

                    public tx_struct(int bitrate, int parity, int minGap) {
                        super(1);
                        this.bitrate = bitrate;
                        this.parity = parity;
                        this.minGap = minGap;
                    }

                    protected List<String> getFieldOrder() {
                        return Arrays.asList("bitrate", "parity", "minGap");
                    }

                    @Override
                    public String toString() {
                        StringBuilder sb = new StringBuilder();
                        sb.append("tx_struct {\n");
                        sb.append("  bitrate: ").append(bitrate).append(" bits/s\n");
                        sb.append("  parity: ").append(parity).append("\n");
                        sb.append("  minGap: ").append(minGap).append("\n");
                        sb.append("}");
                        return sb.toString();
                    }

                    ;

                    public static class ByReference extends tx_struct implements Structure.ByReference {

                    }

                    ;

                    public static class ByValue extends tx_struct implements Structure.ByValue {

                    }
                }

                ;

                /**
                 * <i>native declaration : vxlapi.h:555</i>
                 */
                public static class rx_struct extends Structure {
                    public int bitrate;
                    public int minBitrate;
                    public int maxBitrate;
                    public int parity;
                    public int minGap;
                    public int autoBaudrate;

                    public rx_struct() {
                        super(1);
                    }

                    public rx_struct(int bitrate, int minBitrate, int maxBitrate, int parity, int minGap, int autoBaudrate) {
                        super(1);
                        this.bitrate = bitrate;
                        this.minBitrate = minBitrate;
                        this.maxBitrate = maxBitrate;
                        this.parity = parity;
                        this.minGap = minGap;
                        this.autoBaudrate = autoBaudrate;
                    }

                    protected List<String> getFieldOrder() {
                        return Arrays.asList("bitrate", "minBitrate", "maxBitrate", "parity", "minGap", "autoBaudrate");
                    }

                    @Override
                    public String toString() {
                        StringBuilder sb = new StringBuilder();
                        sb.append("rx_struct {\n");
                        sb.append("  bitrate: ").append(bitrate).append(" bits/s\n");
                        sb.append("  minBitrate: ").append(minBitrate).append(" bits/s\n");
                        sb.append("  maxBitrate: ").append(maxBitrate).append(" bits/s\n");
                        sb.append("  parity: ").append(parity).append("\n");
                        sb.append("  minGap: ").append(minGap).append("\n");
                        sb.append("  autoBaudrate: ").append(autoBaudrate).append("\n");
                        sb.append("}");
                        return sb.toString();
                    }

                    ;

                    public static class ByReference extends rx_struct implements Structure.ByReference {

                    }

                    ;

                    public static class ByValue extends rx_struct implements Structure.ByValue {

                    }
                }

                ;

                public static class ByReference extends dir_union implements Structure.ByReference {

                }

                public static class ByValue extends dir_union implements Structure.ByValue {

                }
            }

            ;

            public static class ByReference extends a429_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends a429_struct implements Structure.ByValue {

            }
        }

        public static class ByReference extends data_union implements Structure.ByReference {

        }

        ;

        public static class ByValue extends data_union implements Structure.ByValue {

        }

        ;
    }

    ;

    public static class ByReference extends XLbusParams implements Structure.ByReference {

    }

    public static class ByValue extends XLbusParams implements Structure.ByValue {

    }
}
