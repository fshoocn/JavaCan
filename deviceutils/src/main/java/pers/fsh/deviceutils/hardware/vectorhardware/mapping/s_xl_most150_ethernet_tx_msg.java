package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_most150_ethernet_tx_msg extends Structure {
    /**
     * Prio: Currently fixed to 0x00 for MDP /MEP
     */
    public int priority;
    /**
     * 1..16 attempts, set an invalid value to use the default value set by xlMost150SetAsyncRetryParameters
     */
    public int ethSendAttempts;
    /**
     * C type : unsigned char[6]
     */
    public byte[] sourceAddress = new byte[6];
    /**
     * C type : unsigned char[6]
     */
    public byte[] targetAddress = new byte[6];
    /**
     * max. 1600 bytes
     */
    public int length;
    /**
     * C type : unsigned char[(unsigned short)1600]
     */
    public byte[] ethernetData = new byte[1600];

    public s_xl_most150_ethernet_tx_msg() {
        super(1);
    }

    /**
     * @param priority        Prio: Currently fixed to 0x00 for MDP /MEP<br>
     * @param ethSendAttempts 1..16 attempts, set an invalid value to use the default value set by xlMost150SetAsyncRetryParameters<br>
     * @param sourceAddress   C type : unsigned char[6]<br>
     * @param targetAddress   C type : unsigned char[6]<br>
     * @param length          max. 1600 bytes<br>
     * @param ethernetData    C type : unsigned char[(unsigned short)1600]
     */
    public s_xl_most150_ethernet_tx_msg(int priority, int ethSendAttempts, byte sourceAddress[], byte targetAddress[], int length, byte ethernetData[]) {
        super(1);
        this.priority = priority;
        this.ethSendAttempts = ethSendAttempts;
        if ((sourceAddress.length != this.sourceAddress.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.sourceAddress = sourceAddress;
        if ((targetAddress.length != this.targetAddress.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.targetAddress = targetAddress;
        this.length = length;
        if ((ethernetData.length != this.ethernetData.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.ethernetData = ethernetData;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("priority", "ethSendAttempts", "sourceAddress", "targetAddress", "length", "ethernetData");
    }

    public static class ByReference extends s_xl_most150_ethernet_tx_msg implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_most150_ethernet_tx_msg implements Structure.ByValue {

    }

    ;
}
