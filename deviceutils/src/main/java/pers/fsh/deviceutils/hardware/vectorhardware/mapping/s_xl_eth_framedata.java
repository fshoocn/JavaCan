package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Union;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_eth_framedata extends Union {
    /**
     * C type : unsigned char[(unsigned int)1600]
     */
    public byte[] rawData = new byte[1600];
    /**
     * C type : T_XL_ETH_FRAME
     */
    public s_xl_eth_frame ethFrame;

    public s_xl_eth_framedata() {
        super();
    }

    /**
     * @param rawData C type : unsigned char[(unsigned int)1600]
     */
    public s_xl_eth_framedata(byte rawData[]) {
        super();
        if ((rawData.length != this.rawData.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.rawData = rawData;
        setType(byte[].class);
    }

    /**
     * @param ethFrame C type : T_XL_ETH_FRAME
     */
    public s_xl_eth_framedata(s_xl_eth_frame ethFrame) {
        super();
        this.ethFrame = ethFrame;
        setType(s_xl_eth_frame.class);
    }

    public static class ByReference extends s_xl_eth_framedata implements com.sun.jna.Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_eth_framedata implements com.sun.jna.Structure.ByValue {

    }

    ;
}
