package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h:229</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_lin_wake_up extends Structure {
    public byte flag;
    /**
     * C type : unsigned char[3]
     */
    public byte[] unused = new byte[3];
    /**
     * spec >= 2.0 only, else 0
     */
    public int startOffs;
    /**
     * spec >= 2.0 only, else 0
     */
    public int width;

    public s_xl_lin_wake_up() {
        super(1);
    }

    /**
     * @param unused    C type : unsigned char[3]<br>
     * @param startOffs spec >= 2.0 only, else 0<br>
     * @param width     spec >= 2.0 only, else 0
     */
    public s_xl_lin_wake_up(byte flag, byte unused[], int startOffs, int width) {
        super(1);
        this.flag = flag;
        if ((unused.length != this.unused.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.unused = unused;
        this.startOffs = startOffs;
        this.width = width;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("flag", "unused", "startOffs", "width");
    }

    public static class ByReference extends s_xl_lin_wake_up implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_lin_wake_up implements Structure.ByValue {

    }

    ;
}
