package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_set_most150_special_node_info extends Structure {
    /**
     * see XL_MOST150_SPECIAL_NODE_MASK_CHANGED
     */
    public int changeMask;
    public int nodeAddress;
    public int groupAddress;
    public int sbc;
    public int ctrlRetryTime;
    public int ctrlSendAttempts;
    public int asyncRetryTime;
    public int asyncSendAttempts;
    /**
     * C type : unsigned char[6]
     */
    public byte[] macAddr = new byte[6];

    public s_xl_set_most150_special_node_info() {
        super(1);
    }

    /**
     * @param changeMask see XL_MOST150_SPECIAL_NODE_MASK_CHANGED<br>
     * @param macAddr    C type : unsigned char[6]
     */
    public s_xl_set_most150_special_node_info(int changeMask, int nodeAddress, int groupAddress, int sbc, int ctrlRetryTime, int ctrlSendAttempts, int asyncRetryTime, int asyncSendAttempts, byte macAddr[]) {
        super(1);
        this.changeMask = changeMask;
        this.nodeAddress = nodeAddress;
        this.groupAddress = groupAddress;
        this.sbc = sbc;
        this.ctrlRetryTime = ctrlRetryTime;
        this.ctrlSendAttempts = ctrlSendAttempts;
        this.asyncRetryTime = asyncRetryTime;
        this.asyncSendAttempts = asyncSendAttempts;
        if ((macAddr.length != this.macAddr.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.macAddr = macAddr;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("changeMask", "nodeAddress", "groupAddress", "sbc", "ctrlRetryTime", "ctrlSendAttempts", "asyncRetryTime", "asyncSendAttempts", "macAddr");
    }

    public static class ByReference extends s_xl_set_most150_special_node_info implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_set_most150_special_node_info implements Structure.ByValue {

    }

    ;
}
