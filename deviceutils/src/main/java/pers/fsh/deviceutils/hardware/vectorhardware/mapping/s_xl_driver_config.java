package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_driver_config extends Structure {
    public int dllVersion;
    /**
     * total number of channels
     */
    public int channelCount;
    /**
     * C type : unsigned int[10]
     */
    public int[] reserved = new int[10];
    /**
     * [channelCount]<br>
     * C type : XLchannelConfig[64u]
     */
    public s_xl_channel_config[] channel = new s_xl_channel_config[64];

    public s_xl_driver_config() {
        super(1);
    }

    /**
     * @param channelCount total number of channels<br>
     * @param reserved     C type : unsigned int[10]<br>
     * @param channel      [channelCount]<br>
     *                     C type : XLchannelConfig[64u]
     */
    public s_xl_driver_config(int dllVersion, int channelCount, int[] reserved, s_xl_channel_config[] channel) {
        super(1);
        this.dllVersion = dllVersion;
        this.channelCount = channelCount;
        if ((reserved.length != this.reserved.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.reserved = reserved;
        if ((channel.length != this.channel.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.channel = channel;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("dllVersion", "channelCount", "reserved", "channel");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("s_xl_driver_config {\n");
        sb.append("  dllVersion: ").append(dllVersion).append(" (0x").append(Integer.toHexString(dllVersion)).append(")\n");
        sb.append("  channelCount: ").append(channelCount).append("\n");
        sb.append("  reserved: ").append(Arrays.toString(reserved)).append("\n");

        // 只输出有效的通道
        sb.append("  channels: [\n");
        for (int i = 0; i < channelCount && i < channel.length; i++) {
            if (channel[i] != null) {
                sb.append("    --- Channel ").append(i).append(" ---\n");
                String channelStr = channel[i].toString();
                // 添加缩进
                channelStr = channelStr.replaceAll("(?m)^", "    ");
                sb.append(channelStr).append("\n");
            }
        }
        sb.append("  ]\n");
        sb.append("}");
        return sb.toString();
    }

    ;

    public static class ByReference extends s_xl_driver_config implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_driver_config implements Structure.ByValue {

    }
}
