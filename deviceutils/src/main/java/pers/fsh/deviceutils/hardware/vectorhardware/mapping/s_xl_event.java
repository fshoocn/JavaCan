package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h:368</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_event extends Structure {
    /**
     * 1<br>
     * C type : XLeventTag
     */
    public byte tag;
    /**
     * 1
     */
    public byte chanIndex;
    /**
     * 2
     */
    public short transId;
    /**
     * 2 internal use only !!!!
     */
    public short portHandle;
    /**
     * 1 (e.g. XL_EVENT_FLAG_OVERRUN)
     */
    public byte flags;
    /**
     * 1
     */
    public byte reserved;
    /**
     * 8<br>
     * C type : XLuint64
     */
    public long timeStamp;
    /**
     * 32 Bytes<br>
     * C type : s_xl_tag_data
     */
    public s_xl_tag_data tagData;

    public s_xl_event() {
        super(1);
    }

    /**
     * @param tag        1<br>
     *                   C type : XLeventTag<br>
     * @param chanIndex  1<br>
     * @param transId    2<br>
     * @param portHandle 2 internal use only !!!!<br>
     * @param flags      1 (e.g. XL_EVENT_FLAG_OVERRUN)<br>
     * @param reserved   1<br>
     * @param timeStamp  8<br>
     *                   C type : XLuint64<br>
     * @param tagData    32 Bytes<br>
     *                   C type : s_xl_tag_data
     */
    public s_xl_event(byte tag, byte chanIndex, short transId, short portHandle, byte flags, byte reserved, long timeStamp, s_xl_tag_data tagData) {
        super(1);
        this.tag = tag;
        this.chanIndex = chanIndex;
        this.transId = transId;
        this.portHandle = portHandle;
        this.flags = flags;
        this.reserved = reserved;
        this.timeStamp = timeStamp;
        this.tagData = tagData;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("tag", "chanIndex", "transId", "portHandle", "flags", "reserved", "timeStamp", "tagData");
    }

    public static class ByReference extends s_xl_event implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_event implements Structure.ByValue {

    }

    ;
}
