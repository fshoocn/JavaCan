package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class XL_CAN_EV_RX_MSG extends Structure {
    public int canId;
    public int msgFlags;
    public int crc;
    /**
     * C type : unsigned char[12]
     */
    public byte[] reserved1 = new byte[12];
    public short totalBitCnt;
    public byte dlc;
    /**
     * C type : unsigned char[5]
     */
    public byte[] reserved = new byte[5];
    /**
     * C type : unsigned char[64]
     */
    public byte[] data = new byte[64];

    public XL_CAN_EV_RX_MSG() {
        super(8);
    }

    /**
     * @param reserved1 C type : unsigned char[12]<br>
     * @param reserved  C type : unsigned char[5]<br>
     * @param data      C type : unsigned char[64]
     */
    public XL_CAN_EV_RX_MSG(int canId, int msgFlags, int crc, byte reserved1[], short totalBitCnt, byte dlc, byte reserved[], byte data[]) {
        super(8);
        this.canId = canId;
        this.msgFlags = msgFlags;
        this.crc = crc;
        if ((reserved1.length != this.reserved1.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.reserved1 = reserved1;
        this.totalBitCnt = totalBitCnt;
        this.dlc = dlc;
        if ((reserved.length != this.reserved.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.reserved = reserved;
        if ((data.length != this.data.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.data = data;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("canId", "msgFlags", "crc", "reserved1", "totalBitCnt", "dlc", "reserved", "data");
    }

    @Override
    public String toString() {
//		return "XL_CAN_EV_RX_MSG{" +
//				"canId=" + canId +
//				", msgFlags=" + msgFlags +
//				", crc=" + crc +
//				", reserved1=" + Arrays.toString(reserved1) +
//				", totalBitCnt=" + totalBitCnt +
//				", dlc=" + dlc +
//				", reserved=" + Arrays.toString(reserved) +
//				", data=" + Arrays.toString(data) +
//				'}';

//		数组需要以16进制打印
        StringBuilder sb = new StringBuilder();
        sb.append("XL_CAN_EV_RX_MSG{");
        sb.append("canId=").append(canId).append(", ");
        sb.append("msgFlags=").append(msgFlags).append(", ");
        sb.append("crc=").append(crc).append(", ");
        sb.append("reserved1=[");
        for (int i = 0; i < reserved1.length; i++) {
            sb.append(String.format("0x%02X", reserved1[i]));
            if (i < reserved1.length - 1) {
                sb.append(", ");
            }
        }
        sb.append("], ");
        sb.append("totalBitCnt=").append(totalBitCnt).append(", ");
        sb.append("dlc=").append(dlc).append(", ");
        sb.append("reserved=[");
        for (int i = 0; i < reserved.length; i++) {
            sb.append(String.format("0x%02X", reserved[i]));
            if (i < reserved.length - 1) {
                sb.append(", ");
            }
        }
        sb.append("], ");
        sb.append("data=[");
        for (int i = 0; i < data.length; i++) {
            sb.append(String.format("0x%02X", data[i]));
            if (i < data.length - 1) {
                sb.append(", ");
            }
        }
        sb.append("]}");
        return sb.toString();
    }

    ;

    public static class ByReference extends XL_CAN_EV_RX_MSG implements Structure.ByReference {

    }

    ;

    public static class ByValue extends XL_CAN_EV_RX_MSG implements Structure.ByValue {

    }
}
