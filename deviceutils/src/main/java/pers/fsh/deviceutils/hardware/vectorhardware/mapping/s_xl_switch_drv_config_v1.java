package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_switch_drv_config_v1 extends Structure {
    /**
     * !< name of the switch, NULL terminated UTF-8 encoded string<br>
     * C type : const char*
     */
    public Pointer switchName;
    /**
     * !< ID of the switch in the network - switches in different networks may have the same switch ID<br>
     * C type : XLswitchId
     */
    public int switchId;
    /**
     * !< the index of the network in the network list this switch belongs to
     */
    public int networkIdx;
    /**
     * !< the device the switch resides on<br>
     * C type : const XLdeviceDrvConfigV1*
     */
    public s_xl_device_drv_config_v1.ByReference device;
    /**
     * !< type of the switch "real", TAP or direct connection
     */
    public int switchCapability;
    /**
     * !< Virtual Port list<br>
     * C type : XLvirtualportDrvConfigListV1
     */
    public s_virtual_port_drv_config_list_v1 vpList;
    /**
     * !< Measurement Point list<br>
     * C type : XLmeasurementpointDrvConfigListV1
     */
    public s_xl_measurement_point_drv_config_list_v1 mpList;

    public s_xl_switch_drv_config_v1() {
        super(8);
    }

    /**
     * @param switchName       !< name of the switch, NULL terminated UTF-8 encoded string<br>
     *                         C type : const char*<br>
     * @param switchId         !< ID of the switch in the network - switches in different networks may have the same switch ID<br>
     *                         C type : XLswitchId<br>
     * @param networkIdx       !< the index of the network in the network list this switch belongs to<br>
     * @param device           !< the device the switch resides on<br>
     *                         C type : const XLdeviceDrvConfigV1*<br>
     * @param switchCapability !< type of the switch "real", TAP or direct connection<br>
     * @param vpList           !< Virtual Port list<br>
     *                         C type : XLvirtualportDrvConfigListV1<br>
     * @param mpList           !< Measurement Point list<br>
     *                         C type : XLmeasurementpointDrvConfigListV1
     */
    public s_xl_switch_drv_config_v1(Pointer switchName, int switchId, int networkIdx, s_xl_device_drv_config_v1.ByReference device, int switchCapability, s_virtual_port_drv_config_list_v1 vpList, s_xl_measurement_point_drv_config_list_v1 mpList) {
        super(8);
        this.switchName = switchName;
        this.switchId = switchId;
        this.networkIdx = networkIdx;
        this.device = device;
        this.switchCapability = switchCapability;
        this.vpList = vpList;
        this.mpList = mpList;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("switchName", "switchId", "networkIdx", "device", "switchCapability", "vpList", "mpList");
    }

    public static class ByReference extends s_xl_switch_drv_config_v1 implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_switch_drv_config_v1 implements Structure.ByValue {

    }

    ;
}
