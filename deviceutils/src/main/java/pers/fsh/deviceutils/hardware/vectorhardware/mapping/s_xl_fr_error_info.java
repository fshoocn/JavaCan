package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Union;

/**
 * <i>native declaration : vxlapi.h:99</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_fr_error_info extends Union {
    /**
     * !< E-RAY: EIR_PEMC<br>
     * C type : XL_FR_ERROR_POC_MODE_EV
     */
    public s_xl_fr_error_poc_mode frPocMode;
    /**
     * !< E-RAY: EIR_SFBM<br>
     * C type : XL_FR_ERROR_SYNC_FRAMES_EV
     */
    public s_xl_fr_error_sync_frames frSyncFramesBelowMin;
    /**
     * !< E-RAY: EIR_SFO<br>
     * C type : XL_FR_ERROR_SYNC_FRAMES_EV
     */
    public s_xl_fr_error_sync_frames frSyncFramesOverload;
    /**
     * !< E-RAY: EIR_CCF<br>
     * C type : XL_FR_ERROR_CLOCK_CORR_FAILURE_EV
     */
    public s_xl_fr_error_clock_corr_failure frClockCorrectionFailure;
    /**
     * !< NIT part of the E_RAY: SWNIT register<br>
     * C type : XL_FR_ERROR_NIT_FAILURE_EV
     */
    public s_xl_fr_error_nit_failure frNitFailure;
    /**
     * !< internal CC error flags (E-RAY: EIR)<br>
     * C type : XL_FR_ERROR_CC_ERROR_EV
     */
    public s_xl_fr_error_cc_error frCCError;

    public s_xl_fr_error_info() {
        super();
    }

    /**
     * @param frCCError !< internal CC error flags (E-RAY: EIR)<br>
     *                  C type : XL_FR_ERROR_CC_ERROR_EV
     */
    public s_xl_fr_error_info(s_xl_fr_error_cc_error frCCError) {
        super();
        this.frCCError = frCCError;
        setType(s_xl_fr_error_cc_error.class);
    }

    /**
     * @param frSyncFramesBelowMin_or_frSyncFramesOverload !< E-RAY: EIR_SFBM<br>
     *                                                     C type : XL_FR_ERROR_SYNC_FRAMES_EV, or !< E-RAY: EIR_SFO<br>
     *                                                     C type : XL_FR_ERROR_SYNC_FRAMES_EV
     */
    public s_xl_fr_error_info(s_xl_fr_error_sync_frames frSyncFramesBelowMin_or_frSyncFramesOverload) {
        super();
        this.frSyncFramesOverload = this.frSyncFramesBelowMin = frSyncFramesBelowMin_or_frSyncFramesOverload;
        setType(s_xl_fr_error_sync_frames.class);
    }

    /**
     * @param frPocMode !< E-RAY: EIR_PEMC<br>
     *                  C type : XL_FR_ERROR_POC_MODE_EV
     */
    public s_xl_fr_error_info(s_xl_fr_error_poc_mode frPocMode) {
        super();
        this.frPocMode = frPocMode;
        setType(s_xl_fr_error_poc_mode.class);
    }

    /**
     * @param frNitFailure !< NIT part of the E_RAY: SWNIT register<br>
     *                     C type : XL_FR_ERROR_NIT_FAILURE_EV
     */
    public s_xl_fr_error_info(s_xl_fr_error_nit_failure frNitFailure) {
        super();
        this.frNitFailure = frNitFailure;
        setType(s_xl_fr_error_nit_failure.class);
    }

    /**
     * @param frClockCorrectionFailure !< E-RAY: EIR_CCF<br>
     *                                 C type : XL_FR_ERROR_CLOCK_CORR_FAILURE_EV
     */
    public s_xl_fr_error_info(s_xl_fr_error_clock_corr_failure frClockCorrectionFailure) {
        super();
        this.frClockCorrectionFailure = frClockCorrectionFailure;
        setType(s_xl_fr_error_clock_corr_failure.class);
    }

    public static class ByReference extends s_xl_fr_error_info implements com.sun.jna.Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_fr_error_info implements com.sun.jna.Structure.ByValue {

    }

    ;
}
