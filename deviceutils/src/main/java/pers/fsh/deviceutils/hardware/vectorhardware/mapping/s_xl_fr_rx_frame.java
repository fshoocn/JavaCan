package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_fr_rx_frame extends Structure {
    public short flags;
    public short headerCRC;
    public short slotID;
    public byte cycleCount;
    public byte payloadLength;
    /**
     * C type : unsigned char[254]
     */
    public byte[] data = new byte[254];

    public s_xl_fr_rx_frame() {
        super(8);
    }

    /**
     * @param data C type : unsigned char[254]
     */
    public s_xl_fr_rx_frame(short flags, short headerCRC, short slotID, byte cycleCount, byte payloadLength, byte data[]) {
        super(8);
        this.flags = flags;
        this.headerCRC = headerCRC;
        this.slotID = slotID;
        this.cycleCount = cycleCount;
        this.payloadLength = payloadLength;
        if ((data.length != this.data.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.data = data;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("flags", "headerCRC", "slotID", "cycleCount", "payloadLength", "data");
    }

    public static class ByReference extends s_xl_fr_rx_frame implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_fr_rx_frame implements Structure.ByValue {

    }

    ;
}
