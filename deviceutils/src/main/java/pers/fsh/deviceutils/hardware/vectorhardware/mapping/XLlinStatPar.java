package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class XLlinStatPar extends Structure {
    /**
     * !< XL_LIN_SLAVE | XL_LIN_MASTER
     */
    public int LINMode;
    /**
     * !< the baudrate will be calculated within the API. Here: e.g. 9600, 19200
     */
    public int baudrate;
    /**
     * !< define for the LIN version (actual V1.3 of V2.0)
     */
    public int LINVersion;
    /**
     * !< for future use
     */
    public int reserved;

    public XLlinStatPar() {
        super(1);
    }

    /**
     * @param LINMode    !< XL_LIN_SLAVE | XL_LIN_MASTER<br>
     * @param baudrate   !< the baudrate will be calculated within the API. Here: e.g. 9600, 19200<br>
     * @param LINVersion !< define for the LIN version (actual V1.3 of V2.0)<br>
     * @param reserved   !< for future use
     */
    public XLlinStatPar(int LINMode, int baudrate, int LINVersion, int reserved) {
        super(1);
        this.LINMode = LINMode;
        this.baudrate = baudrate;
        this.LINVersion = LINVersion;
        this.reserved = reserved;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("LINMode", "baudrate", "LINVersion", "reserved");
    }

    public static class ByReference extends XLlinStatPar implements Structure.ByReference {

    }

    ;

    public static class ByValue extends XLlinStatPar implements Structure.ByValue {

    }

    ;
}
