package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;
import pers.fsh.deviceutils.hardware.vectorhardware.mapping.Vxlapi64DllLibrary.*;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xlapi_driver_config_v1 extends Structure {
    /**
     * C type : XLdrvConfigHandle
     */
    public XLdrvConfigHandle configHandle;
    /**
     * C type : TP_FCT_XLAPI_GET_DEVICE_CONFIG_V1
     */
    public TP_FCT_XLAPI_GET_DEVICE_CONFIG_V1 fctGetDeviceConfig;
    /**
     * C type : TP_FCT_XLAPI_GET_CHANNEL_CONFIG_V1
     */
    public TP_FCT_XLAPI_GET_CHANNEL_CONFIG_V1 fctGetChannelConfig;
    /**
     * C type : TP_FCT_XLAPI_GET_NETWORK_CONFIG_V1
     */
    public TP_FCT_XLAPI_GET_NETWORK_CONFIG_V1 fctGetNetworkConfig;
    /**
     * C type : TP_FCT_XLAPI_GET_SWITCH_CONFIG_V1
     */
    public TP_FCT_XLAPI_GET_SWITCH_CONFIG_V1 fctGetSwitchConfig;
    /**
     * C type : TP_FCT_XLAPI_GET_VIRTUAL_PORT_CONFIG_V1
     */
    public TP_FCT_XLAPI_GET_VIRTUAL_PORT_CONFIG_V1 fctGetVirtualPortConfig;
    /**
     * C type : TP_FCT_XLAPI_GET_MEASUREMENT_POINT_CONFIG_V1
     */
    public TP_FCT_XLAPI_GET_MEASUREMENT_POINT_CONFIG_V1 fctGetMeasurementPointConfig;
    /**
     * C type : TP_FCT_XLAPI_GET_DLL_CONFIG_V1
     */
    public TP_FCT_XLAPI_GET_DLL_CONFIG_V1 fctGetDllConfig;

    public s_xlapi_driver_config_v1() {
        super(8);
    }

    /**
     * @param configHandle                 C type : XLdrvConfigHandle<br>
     * @param fctGetDeviceConfig           C type : TP_FCT_XLAPI_GET_DEVICE_CONFIG_V1<br>
     * @param fctGetChannelConfig          C type : TP_FCT_XLAPI_GET_CHANNEL_CONFIG_V1<br>
     * @param fctGetNetworkConfig          C type : TP_FCT_XLAPI_GET_NETWORK_CONFIG_V1<br>
     * @param fctGetSwitchConfig           C type : TP_FCT_XLAPI_GET_SWITCH_CONFIG_V1<br>
     * @param fctGetVirtualPortConfig      C type : TP_FCT_XLAPI_GET_VIRTUAL_PORT_CONFIG_V1<br>
     * @param fctGetMeasurementPointConfig C type : TP_FCT_XLAPI_GET_MEASUREMENT_POINT_CONFIG_V1<br>
     * @param fctGetDllConfig              C type : TP_FCT_XLAPI_GET_DLL_CONFIG_V1
     */
    public s_xlapi_driver_config_v1(XLdrvConfigHandle configHandle, TP_FCT_XLAPI_GET_DEVICE_CONFIG_V1 fctGetDeviceConfig, TP_FCT_XLAPI_GET_CHANNEL_CONFIG_V1 fctGetChannelConfig, TP_FCT_XLAPI_GET_NETWORK_CONFIG_V1 fctGetNetworkConfig, TP_FCT_XLAPI_GET_SWITCH_CONFIG_V1 fctGetSwitchConfig, TP_FCT_XLAPI_GET_VIRTUAL_PORT_CONFIG_V1 fctGetVirtualPortConfig, TP_FCT_XLAPI_GET_MEASUREMENT_POINT_CONFIG_V1 fctGetMeasurementPointConfig, TP_FCT_XLAPI_GET_DLL_CONFIG_V1 fctGetDllConfig) {
        super(8);
        this.configHandle = configHandle;
        this.fctGetDeviceConfig = fctGetDeviceConfig;
        this.fctGetChannelConfig = fctGetChannelConfig;
        this.fctGetNetworkConfig = fctGetNetworkConfig;
        this.fctGetSwitchConfig = fctGetSwitchConfig;
        this.fctGetVirtualPortConfig = fctGetVirtualPortConfig;
        this.fctGetMeasurementPointConfig = fctGetMeasurementPointConfig;
        this.fctGetDllConfig = fctGetDllConfig;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("configHandle", "fctGetDeviceConfig", "fctGetChannelConfig", "fctGetNetworkConfig", "fctGetSwitchConfig", "fctGetVirtualPortConfig", "fctGetMeasurementPointConfig", "fctGetDllConfig");
    }

    public static class ByReference extends s_xlapi_driver_config_v1 implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xlapi_driver_config_v1 implements Structure.ByValue {

    }

    ;
}
