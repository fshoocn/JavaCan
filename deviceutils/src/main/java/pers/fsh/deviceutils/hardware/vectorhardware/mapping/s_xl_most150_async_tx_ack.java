package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_most150_async_tx_ack extends Structure {
    public byte priority;
    public byte asyncSendAttempts;
    public short length;
    public short targetAddress;
    public short sourceAddress;
    public int status;
    /**
     * C type : unsigned char[1524]
     */
    public byte[] asyncData = new byte[1524];

    public s_xl_most150_async_tx_ack() {
        super(1);
    }

    /**
     * @param asyncData C type : unsigned char[1524]
     */
    public s_xl_most150_async_tx_ack(byte priority, byte asyncSendAttempts, short length, short targetAddress, short sourceAddress, int status, byte asyncData[]) {
        super(1);
        this.priority = priority;
        this.asyncSendAttempts = asyncSendAttempts;
        this.length = length;
        this.targetAddress = targetAddress;
        this.sourceAddress = sourceAddress;
        this.status = status;
        if ((asyncData.length != this.asyncData.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.asyncData = asyncData;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("priority", "asyncSendAttempts", "length", "targetAddress", "sourceAddress", "status", "asyncData");
    }

    public static class ByReference extends s_xl_most150_async_tx_ack implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_most150_async_tx_ack implements Structure.ByValue {

    }

    ;
}
