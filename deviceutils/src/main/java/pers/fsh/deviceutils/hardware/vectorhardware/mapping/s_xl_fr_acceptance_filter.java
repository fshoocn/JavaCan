package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_fr_acceptance_filter extends Structure {
    /**
     * !< defines if the specified frame should be blocked or pass the filter
     */
    public int filterStatus;
    /**
     * !< specifies the frame type that should be filtered
     */
    public int filterTypeMask;
    /**
     * !< beginning of the slot range
     */
    public int filterFirstSlot;
    /**
     * !< end of the slot range (can be the same as filterFirstSlot)
     */
    public int filterLastSlot;
    /**
     * !< channel A, B for PC, channel A, B for COB
     */
    public int filterChannelMask;

    public s_xl_fr_acceptance_filter() {
        super(8);
    }

    /**
     * @param filterStatus      !< defines if the specified frame should be blocked or pass the filter<br>
     * @param filterTypeMask    !< specifies the frame type that should be filtered<br>
     * @param filterFirstSlot   !< beginning of the slot range<br>
     * @param filterLastSlot    !< end of the slot range (can be the same as filterFirstSlot)<br>
     * @param filterChannelMask !< channel A, B for PC, channel A, B for COB
     */
    public s_xl_fr_acceptance_filter(int filterStatus, int filterTypeMask, int filterFirstSlot, int filterLastSlot, int filterChannelMask) {
        super(8);
        this.filterStatus = filterStatus;
        this.filterTypeMask = filterTypeMask;
        this.filterFirstSlot = filterFirstSlot;
        this.filterLastSlot = filterLastSlot;
        this.filterChannelMask = filterChannelMask;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("filterStatus", "filterTypeMask", "filterFirstSlot", "filterLastSlot", "filterChannelMask");
    }

    public static class ByReference extends s_xl_fr_acceptance_filter implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_fr_acceptance_filter implements Structure.ByValue {

    }

    ;
}
