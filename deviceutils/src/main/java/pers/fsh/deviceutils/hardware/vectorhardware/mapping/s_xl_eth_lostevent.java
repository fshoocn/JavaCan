package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;
import com.sun.jna.Union;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_eth_lostevent extends Structure {
    /**
     * Type of event lost<br>
     * C type : XLethEventTag
     */
    public short eventTypeLost;
    /**
     * currently reserved field - not used
     */
    public short reserved;
    /**
     * Reason code why the events were lost (0 means unknown)
     */
    public int reason;
    /**
     * C type : eventInfo_union
     */
    public eventInfo_union eventInfo;

    public s_xl_eth_lostevent() {
        super(4);
    }

    ;

    /**
     * @param eventTypeLost Type of event lost<br>
     *                      C type : XLethEventTag<br>
     * @param reserved      currently reserved field - not used<br>
     * @param reason        Reason code why the events were lost (0 means unknown)<br>
     * @param eventInfo     C type : eventInfo_union
     */
    public s_xl_eth_lostevent(short eventTypeLost, short reserved, int reason, eventInfo_union eventInfo) {
        super(4);
        this.eventTypeLost = eventTypeLost;
        this.reserved = reserved;
        this.reason = reason;
        this.eventInfo = eventInfo;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("eventTypeLost", "reserved", "reason", "eventInfo");
    }

    /**
     * <i>native declaration : vxlapi.h:22</i>
     */
    public static class eventInfo_union extends Union {
        /**
         * C type : txAck_struct
         */
        public txAck_struct txAck;
        /**
         * C type : txAckSw_struct
         */
        public txAckSw_struct txAckSw;
        /**
         * C type : txError_struct
         */
        public txError_struct txError;
        /**
         * C type : txErrorSw_struct
         */
        public txErrorSw_struct txErrorSw;
        /**
         * C type : unsigned int[20]
         */
        public int[] reserved = new int[20];

        public eventInfo_union() {
            super();
        }

        ;

        /**
         * @param txAckSw C type : txAckSw_struct
         */
        public eventInfo_union(txAckSw_struct txAckSw) {
            super();
            this.txAckSw = txAckSw;
            setType(txAckSw_struct.class);
        }

        ;

        /**
         * @param txErrorSw C type : txErrorSw_struct
         */
        public eventInfo_union(txErrorSw_struct txErrorSw) {
            super();
            this.txErrorSw = txErrorSw;
            setType(txErrorSw_struct.class);
        }

        ;

        /**
         * @param reserved C type : unsigned int[20]
         */
        public eventInfo_union(int reserved[]) {
            super();
            if ((reserved.length != this.reserved.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.reserved = reserved;
            setType(int[].class);
        }

        ;

        /**
         * @param txAck C type : txAck_struct
         */
        public eventInfo_union(txAck_struct txAck) {
            super();
            this.txAck = txAck;
            setType(txAck_struct.class);
        }

        /**
         * @param txError C type : txError_struct
         */
        public eventInfo_union(txError_struct txError) {
            super();
            this.txError = txError;
            setType(txError_struct.class);
        }

        /**
         * <i>native declaration : vxlapi.h</i>
         */
        public static class txAck_struct extends Structure {
            /**
             * FPGA internal identifier unique to every frame sent
             */
            public int frameIdentifier;
            /**
             * Frame Check Sum
             */
            public int fcs;
            /**
             * Source MAC address<br>
             * C type : unsigned char[6]
             */
            public byte[] sourceMAC = new byte[6];
            /**
             * currently reserved field - not used<br>
             * C type : unsigned char[2]
             */
            public byte[] reserved = new byte[2];

            public txAck_struct() {
                super(4);
            }

            /**
             * @param frameIdentifier FPGA internal identifier unique to every frame sent<br>
             * @param fcs             Frame Check Sum<br>
             * @param sourceMAC       Source MAC address<br>
             *                        C type : unsigned char[6]<br>
             * @param reserved        currently reserved field - not used<br>
             *                        C type : unsigned char[2]
             */
            public txAck_struct(int frameIdentifier, int fcs, byte sourceMAC[], byte reserved[]) {
                super(4);
                this.frameIdentifier = frameIdentifier;
                this.fcs = fcs;
                if ((sourceMAC.length != this.sourceMAC.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.sourceMAC = sourceMAC;
                if ((reserved.length != this.reserved.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.reserved = reserved;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("frameIdentifier", "fcs", "sourceMAC", "reserved");
            }

            public static class ByReference extends txAck_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends txAck_struct implements Structure.ByValue {

            }

            ;
        }

        /**
         * <i>native declaration : vxlapi.h</i>
         */
        public static class txAckSw_struct extends Structure {
            /**
             * FPGA internal identifier unique to every frame sent
             */
            public int frameIdentifier;
            /**
             * Frame Check Sum
             */
            public int fcs;
            /**
             * Source MAC address<br>
             * C type : unsigned char[6]
             */
            public byte[] sourceMAC = new byte[6];
            /**
             * currently reserved field - not used<br>
             * C type : unsigned char[2]
             */
            public byte[] reserved = new byte[2];

            public txAckSw_struct() {
                super(4);
            }

            /**
             * @param frameIdentifier FPGA internal identifier unique to every frame sent<br>
             * @param fcs             Frame Check Sum<br>
             * @param sourceMAC       Source MAC address<br>
             *                        C type : unsigned char[6]<br>
             * @param reserved        currently reserved field - not used<br>
             *                        C type : unsigned char[2]
             */
            public txAckSw_struct(int frameIdentifier, int fcs, byte sourceMAC[], byte reserved[]) {
                super(4);
                this.frameIdentifier = frameIdentifier;
                this.fcs = fcs;
                if ((sourceMAC.length != this.sourceMAC.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.sourceMAC = sourceMAC;
                if ((reserved.length != this.reserved.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.reserved = reserved;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("frameIdentifier", "fcs", "sourceMAC", "reserved");
            }

            public static class ByReference extends txAckSw_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends txAckSw_struct implements Structure.ByValue {

            }

            ;
        }

        /**
         * <i>native declaration : vxlapi.h</i>
         */
        public static class txError_struct extends Structure {
            public int errorType;
            /**
             * FPGA internal identifier unique to every frame sent
             */
            public int frameIdentifier;
            /**
             * Frame Check Sum
             */
            public int fcs;
            /**
             * Source MAC address<br>
             * C type : unsigned char[6]
             */
            public byte[] sourceMAC = new byte[6];
            /**
             * currently reserved field - not used<br>
             * C type : unsigned char[2]
             */
            public byte[] reserved = new byte[2];

            public txError_struct() {
                super(4);
            }

            /**
             * @param frameIdentifier FPGA internal identifier unique to every frame sent<br>
             * @param fcs             Frame Check Sum<br>
             * @param sourceMAC       Source MAC address<br>
             *                        C type : unsigned char[6]<br>
             * @param reserved        currently reserved field - not used<br>
             *                        C type : unsigned char[2]
             */
            public txError_struct(int errorType, int frameIdentifier, int fcs, byte sourceMAC[], byte reserved[]) {
                super(4);
                this.errorType = errorType;
                this.frameIdentifier = frameIdentifier;
                this.fcs = fcs;
                if ((sourceMAC.length != this.sourceMAC.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.sourceMAC = sourceMAC;
                if ((reserved.length != this.reserved.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.reserved = reserved;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("errorType", "frameIdentifier", "fcs", "sourceMAC", "reserved");
            }

            public static class ByReference extends txError_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends txError_struct implements Structure.ByValue {

            }

            ;
        }

        /**
         * <i>native declaration : vxlapi.h</i>
         */
        public static class txErrorSw_struct extends Structure {
            public int errorType;
            /**
             * FPGA internal identifier unique to every frame sent
             */
            public int frameIdentifier;
            /**
             * Frame Check Sum
             */
            public int fcs;
            /**
             * Source MAC address<br>
             * C type : unsigned char[6]
             */
            public byte[] sourceMAC = new byte[6];
            /**
             * currently reserved field - not used<br>
             * C type : unsigned char[2]
             */
            public byte[] reserved = new byte[2];

            public txErrorSw_struct() {
                super(4);
            }

            /**
             * @param frameIdentifier FPGA internal identifier unique to every frame sent<br>
             * @param fcs             Frame Check Sum<br>
             * @param sourceMAC       Source MAC address<br>
             *                        C type : unsigned char[6]<br>
             * @param reserved        currently reserved field - not used<br>
             *                        C type : unsigned char[2]
             */
            public txErrorSw_struct(int errorType, int frameIdentifier, int fcs, byte sourceMAC[], byte reserved[]) {
                super(4);
                this.errorType = errorType;
                this.frameIdentifier = frameIdentifier;
                this.fcs = fcs;
                if ((sourceMAC.length != this.sourceMAC.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.sourceMAC = sourceMAC;
                if ((reserved.length != this.reserved.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.reserved = reserved;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("errorType", "frameIdentifier", "fcs", "sourceMAC", "reserved");
            }

            public static class ByReference extends txErrorSw_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends txErrorSw_struct implements Structure.ByValue {

            }

            ;
        }

        public static class ByReference extends eventInfo_union implements Structure.ByReference {

        }

        ;

        public static class ByValue extends eventInfo_union implements Structure.ByValue {

        }

        ;
    }

    public static class ByReference extends s_xl_eth_lostevent implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_eth_lostevent implements Structure.ByValue {

    }

    ;
}
