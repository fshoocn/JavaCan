package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;
import com.sun.jna.Union;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_a429_params extends Structure {
    public short channelDirection;
    public short res1;
    /**
     * C type : data_union
     */
    public data_union data;

    public s_xl_a429_params() {
        super(8);
    }

    ;

    /**
     * @param data C type : data_union
     */
    public s_xl_a429_params(short channelDirection, short res1, data_union data) {
        super(8);
        this.channelDirection = channelDirection;
        this.res1 = res1;
        this.data = data;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("channelDirection", "res1", "data");
    }

    /**
     * <i>native declaration : vxlapi.h:91</i>
     */
    public static class data_union extends Union {
        /**
         * C type : tx_struct
         */
        public tx_struct tx;
        /**
         * C type : rx_struct
         */
        public rx_struct rx;
        /**
         * C type : unsigned char[28]
         */
        public byte[] raw = new byte[28];

        public data_union() {
            super();
        }

        ;

        /**
         * @param raw C type : unsigned char[28]
         */
        public data_union(byte[] raw) {
            super();
            if ((raw.length != this.raw.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.raw = raw;
            setType(byte[].class);
        }

        ;

        /**
         * @param tx C type : tx_struct
         */
        public data_union(tx_struct tx) {
            super();
            this.tx = tx;
            setType(tx_struct.class);
        }

        /**
         * @param rx C type : rx_struct
         */
        public data_union(rx_struct rx) {
            super();
            this.rx = rx;
            setType(rx_struct.class);
        }

        /**
         * <i>native declaration : vxlapi.h:92</i>
         */
        public static class tx_struct extends Structure {
            public int bitrate;
            public int parity;
            public int minGap;

            public tx_struct() {
                super(8);
            }

            public tx_struct(int bitrate, int parity, int minGap) {
                super(8);
                this.bitrate = bitrate;
                this.parity = parity;
                this.minGap = minGap;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("bitrate", "parity", "minGap");
            }

            public static class ByReference extends tx_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends tx_struct implements Structure.ByValue {

            }

            ;
        }

        /**
         * <i>native declaration : vxlapi.h:98</i>
         */
        public static class rx_struct extends Structure {
            public int bitrate;
            public int minBitrate;
            public int maxBitrate;
            public int parity;
            public int minGap;
            public int autoBaudrate;

            public rx_struct() {
                super(8);
            }

            public rx_struct(int bitrate, int minBitrate, int maxBitrate, int parity, int minGap, int autoBaudrate) {
                super(8);
                this.bitrate = bitrate;
                this.minBitrate = minBitrate;
                this.maxBitrate = maxBitrate;
                this.parity = parity;
                this.minGap = minGap;
                this.autoBaudrate = autoBaudrate;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("bitrate", "minBitrate", "maxBitrate", "parity", "minGap", "autoBaudrate");
            }

            public static class ByReference extends rx_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends rx_struct implements Structure.ByValue {

            }

            ;
        }

        public static class ByReference extends data_union implements Structure.ByReference {

        }

        ;

        public static class ByValue extends data_union implements Structure.ByValue {

        }

        ;
    }

    public static class ByReference extends s_xl_a429_params implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_a429_params implements Structure.ByValue {

    }

    ;
}
