package pers.fsh.deviceutils.hardware.vectorhardware.mapping;

import com.sun.jna.Structure;
import com.sun.jna.Union;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : vxlapi.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class s_xl_daio_trigger_mode extends Structure {
    /**
     * !< Use defines XL_DAIO_PORT_TYPE_MASK_xxx. Unused for VN1630/VN1640.
     */
    public int portTypeMask;
    /**
     * !< Use defines XL_DAIO_TRIGGER_TYPE_xxx from above
     */
    public int triggerType;
    /**
     * C type : triggerTypeParams
     */
    public triggerTypeParams param;

    public s_xl_daio_trigger_mode() {
        super(8);
    }

    ;

    /**
     * @param portTypeMask !< Use defines XL_DAIO_PORT_TYPE_MASK_xxx. Unused for VN1630/VN1640.<br>
     * @param triggerType  !< Use defines XL_DAIO_TRIGGER_TYPE_xxx from above<br>
     * @param param        C type : triggerTypeParams
     */
    public s_xl_daio_trigger_mode(int portTypeMask, int triggerType, triggerTypeParams param) {
        super(8);
        this.portTypeMask = portTypeMask;
        this.triggerType = triggerType;
        this.param = param;
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("portTypeMask", "triggerType", "param");
    }

    /**
     * <i>native declaration : vxlapi.h:20</i>
     */
    public static class triggerTypeParams extends Union {
        /**
         * !< specify time in microseconds
         */
        public int cycleTime;
        /**
         * C type : digital_struct
         */
        public digital_struct digital;

        public triggerTypeParams() {
            super();
        }

        ;

        /**
         * @param digital C type : digital_struct
         */
        public triggerTypeParams(digital_struct digital) {
            super();
            this.digital = digital;
            setType(digital_struct.class);
        }

        /**
         * @param cycleTime !< specify time in microseconds
         */
        public triggerTypeParams(int cycleTime) {
            super();
            this.cycleTime = cycleTime;
            setType(Integer.TYPE);
        }

        /**
         * <i>native declaration : vxlapi.h:23</i>
         */
        public static class digital_struct extends Structure {
            public int portMask;
            /**
             * !< Use defines XL_DAIO_TRIGGER_TYPE_xxx from below
             */
            public int type;

            public digital_struct() {
                super(8);
            }

            /**
             * @param type !< Use defines XL_DAIO_TRIGGER_TYPE_xxx from below
             */
            public digital_struct(int portMask, int type) {
                super(8);
                this.portMask = portMask;
                this.type = type;
            }

            protected List<String> getFieldOrder() {
                return Arrays.asList("portMask", "type");
            }

            public static class ByReference extends digital_struct implements Structure.ByReference {

            }

            ;

            public static class ByValue extends digital_struct implements Structure.ByValue {

            }

            ;
        }

        public static class ByReference extends triggerTypeParams implements Structure.ByReference {

        }

        ;

        public static class ByValue extends triggerTypeParams implements Structure.ByValue {

        }

        ;
    }

    public static class ByReference extends s_xl_daio_trigger_mode implements Structure.ByReference {

    }

    ;

    public static class ByValue extends s_xl_daio_trigger_mode implements Structure.ByValue {

    }

    ;
}
